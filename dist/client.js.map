{"version":3,"file":"client.js","sourceRoot":"","sources":["../src/client.ts"],"names":[],"mappings":";;;;;;AAAA,2CAA4E;AAC5E,2CAAiC;AACjC,kDAAyB;AACzB,oDAA2B;AAC3B,gBAAM,CAAC,MAAM,EAAE,CAAA;AAEf,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,EAAE,CAAA;AACnD,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,IAAI,EAAE,CAAA;AAE7C,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,EAAE,CAAA;AACnD,MAAM,gBAAgB,GAAG,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,EAAE,CAAA;AAC3D,MAAM,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,EAAE,CAAA;AACvD,MAAM,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,EAAE,CAAA;AACvD,MAAM,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,EAAE,CAAA;AACvD,MAAM,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,EAAE,CAAA;AAE1C,QAAA,MAAM,GAAG,IAAI,mBAAM,CAAC;IAC/B,OAAO,EAAE;QACP,8BAAiB,CAAC,MAAM;QACxB,8BAAiB,CAAC,YAAY;QAC9B,8BAAiB,CAAC,aAAa;QAC/B,8BAAiB,CAAC,cAAc;KACjC;CACF,CAAC,CAAA;AAEF,KAAK,UAAU,oBAAoB;IACjC,MAAM,QAAQ,GAAG;QACf;YACE,IAAI,EAAE,UAAU;YAChB,WAAW,EAAE,sBAAsB;SACpC;KACF,CAAA;IAED,MAAM,IAAI,GAAG,IAAI,iBAAI,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAA;IAE9C,IAAI;QACF,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAA;QACvC,MAAM,IAAI,CAAC,GAAG,CAAC,mBAAM,CAAC,mBAAmB,CAAC,SAAS,CAAC,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAA;QACzE,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAA;KACxC;IAAC,OAAO,GAAG,EAAE;QACZ,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;KACjB;AACH,CAAC;AAED,cAAM,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;IAC5B,OAAO,CAAC,GAAG,CAAC,GAAG,cAAM,EAAE,IAAI,EAAE,QAAQ,8BAA8B,CAAC,CAAA;IACpE,6EAA6E;IAC7E,cAAM,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAA;IACrC,oBAAoB,EAAE,CAAA;AACxB,CAAC,CAAC,CAAA;AAEF,cAAM,CAAC,EAAE,CAAC,mBAAmB,EAAE,KAAK,EAAE,WAAW,EAAE,EAAE;IACnD,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAAE;QAAE,OAAM;IAC7C,IAAI,WAAW,CAAC,WAAW,KAAK,UAAU,EAAE;QAE1C,yCAAyC;QACzC,0CAA0C;QAC1C,sBAAsB;QACtB,0BAA0B;QAC1B,qCAAqC;QACrC,+GAA+G;QAC/G,2CAA2C;QAC3C,mDAAmD;QACnD,cAAc;QACd,+DAA+D;QAC/D,yCAAyC;QACzC,4EAA4E;QAC5E,4EAA4E;QAC5E,IAAI;QACJ,qFAAqF;QACrF,+CAA+C;QAC/C,kBAAkB;QAClB,6FAA6F;QAE7F,4CAA4C;QAE5C,IAAI,UAAU,GAAG,IAAI,CAAA;QACrB,IAAI,cAAc,GAAG,IAAI,CAAA;QACzB,IAAI,YAAY,GAAG,IAAI,CAAA;QACvB,IAAI,YAAY,GAAG,IAAI,CAAA;QACvB,IAAI,YAAY,GAAG,IAAI,CAAA;QACvB,IAAI,YAAY,GAAG,IAAI,CAAA;QACvB,IAAI,UAAU,GAAG,EAAE,CAAA;QAEnB,sBAAsB;QACtB,MAAM,eAAK,CAAC,GAAG,CAAC;YACd,IAAA,eAAK,EAAC,yBAAyB,YAAY,EAAE,CAAC;YAC9C,IAAA,eAAK,EAAC,yBAAyB,gBAAgB,EAAE,CAAC;YAClD,IAAA,eAAK,EAAC,yBAAyB,cAAc,EAAE,CAAC;YAChD,IAAA,eAAK,EAAC,yBAAyB,cAAc,EAAE,CAAC;YAChD,IAAA,eAAK,EAAC,yBAAyB,cAAc,EAAE,CAAC;YAChD,IAAA,eAAK,EAAC,yBAAyB,cAAc,EAAE,CAAC;SACjD,CAAC;aACC,IAAI,CAAC,eAAK,CAAC,MAAM,CAAC,CACjB,MAAM,EACN,UAAU,EACV,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,EAAE;YACF,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,GAAG,aAAa,CAAA;YACjD,cAAc,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,GAAG,iBAAiB,CAAA;YAC7D,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,GAAG,eAAe,CAAA;YACvD,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,GAAG,eAAe,CAAA;YACvD,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,GAAG,eAAe,CAAA;YACvD,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,GAAG,eAAe,CAAA;YAEvD,IAAI,UAAU,GAAG;gBACf,UAAU;gBACV,cAAc;gBACd,YAAY;gBACZ,YAAY;gBACZ,YAAY;gBACZ,YAAY;aACb,CAAA;YAED,uCAAuC;YACvC,IAAI,aAAa,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC3C,IAAI,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBACvC,IAAI,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBAEvC,IAAI,OAAO,GAAG,OAAO;oBAAE,OAAO,CAAC,CAAC,CAAA;gBAChC,IAAI,OAAO,GAAG,OAAO;oBAAE,OAAO,CAAC,CAAA;gBAC/B,OAAO,CAAC,CAAA;YACV,CAAC,CAAC,CAAA;YAEF,eAAe;YACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC7C,MAAM,UAAU,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;gBACjD,MAAM,oBAAoB,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,CAAA;gBACtF,aAAa,CAAC,CAAC,CAAC,GAAG,oBAAoB,GAAG,UAAU,CAAA;gBACpD,aAAa,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,KAAK,aAAa,CAAC,CAAC,CAAC,EAAE,CAAA;aACnD;YAED,oBAAoB;YACpB,UAAU,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACrC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAA;QACzB,CAAC,CAAC,CAAC;aAEF,KAAK,CAAC,KAAK,CAAC,EAAE;YACb,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;QACpB,CAAC,CAAC,CAAA;QAEJ,MAAM,KAAK,GAAG,IAAI,yBAAY,EAAE;aAC7B,QAAQ,CAAC,QAAQ,CAAC;aAClB,QAAQ,CAAC,UAAU,CAAC;aACpB,cAAc,CAAC,GAAG,UAAU,EAAE,CAAC;aAC/B,YAAY,EAAE,CAAA;QAEjB,WAAW,CAAC,KAAK,CAAC;YAChB,4BAA4B;YAC5B,MAAM,EAAE,CAAC,KAAK,CAAC;SAChB,CAAC,CAAA;KACH;AACH,CAAC,CAAC,CAAA;AAEF,cAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAA","sourcesContent":["import { Client, GatewayIntentBits, Routes, EmbedBuilder } from 'discord.js'\nimport { REST } from 'discord.js'\nimport axios from 'axios'\nimport dotenv from 'dotenv'\ndotenv.config()\n\nconst CLIENT_TOKEN = process.env.CLIENT_TOKEN ?? ''\nconst CLIENT_ID = process.env.CLIENT_ID ?? ''\n\nconst VI_PLAYER_ID = process.env.VI_PLAYER_ID ?? ''\nconst AMANDA_PLAYER_ID = process.env.AMANDA_PLAYER_ID ?? ''\nconst RYAN_PLAYER_ID = process.env.RYAN_PLAYER_ID ?? ''\nconst ANDY_PLAYER_ID = process.env.ANDY_PLAYER_ID ?? ''\nconst ALAN_PLAYER_ID = process.env.ALAN_PLAYER_ID ?? ''\nconst ERIK_PLAYER_ID = process.env.ERIK_PLAYER_ID ?? ''\n\nexport const client = new Client({\n  intents: [\n    GatewayIntentBits.Guilds,\n    GatewayIntentBits.GuildMembers,\n    GatewayIntentBits.GuildMessages,\n    GatewayIntentBits.MessageContent\n  ]\n})\n\nasync function registerSlashCommand() {\n  const commands = [\n    {\n      name: \"trophies\",\n      description: \"List player rankings\",\n    },\n  ]\n\n  const rest = new REST().setToken(CLIENT_TOKEN)\n\n  try {\n    console.log(\"Registering commands [/]\")\n    await rest.put(Routes.applicationCommands(CLIENT_ID), { body: commands })\n    console.log(\"Registered commands! [/]\")\n  } catch (err) {\n    console.log(err)\n  }\n}\n\nclient.on(\"ready\", async () => {\n  console.log(`${client?.user?.username} is now connected to Discord`)\n  // client?.user?.setActivity(`Watching ${client.guilds.cache.size} servers!`)\n  client.user.setActivity('Brawlstars')\n  registerSlashCommand()\n})\n\nclient.on(\"interactionCreate\", async (interaction) => {\n  if (!interaction.isChatInputCommand()) return\n  if (interaction.commandName === \"trophies\") {\n    \n    // inside a command, event listener, etc.\n    // const exampleEmbed = new EmbedBuilder()\n    // .setColor(0x0099FF)\n    // .setTitle('Some title')\n    // .setURL('https://discord.js.org/')\n    // .setAuthor({ name: 'Some name', iconURL: 'https://i.imgur.com/AfFp7pu.png', url: 'https://discord.js.org' })\n    // .setDescription('Some description here')\n    // .setThumbnail('https://i.imgur.com/AfFp7pu.png')\n    // .addFields(\n    //   { name: 'Regular field title', value: 'Some value here' },\n    //   { name: '\\u200B', value: '\\u200B' },\n    //   { name: 'Inline field title', value: 'Some value here', inline: true },\n    //   { name: 'Inline field title', value: 'Some value here', inline: true },\n    // )\n    // .addFields({ name: 'Inline field title', value: 'Some value here', inline: true })\n    // .setImage('https://i.imgur.com/AfFp7pu.png')\n    // .setTimestamp()\n    // .setFooter({ text: 'Some footer text here', iconURL: 'https://i.imgur.com/AfFp7pu.png' });\n\n    // channel.send({ embeds: [exampleEmbed] });\n\n    let viTrophies = null\n    let amandaTrophies = null\n    let ryanTrophies = null\n    let andyTrophies = null\n    let alanTrophies = null\n    let erikTrophies = null\n    let finalReply = ''\n\n    // Fetch data from API\n    await axios.all([\n      axios(`http://localhost:3000/${VI_PLAYER_ID}`),\n      axios(`http://localhost:3000/${AMANDA_PLAYER_ID}`),\n      axios(`http://localhost:3000/${RYAN_PLAYER_ID}`),\n      axios(`http://localhost:3000/${ANDY_PLAYER_ID}`),\n      axios(`http://localhost:3000/${ALAN_PLAYER_ID}`),\n      axios(`http://localhost:3000/${ERIK_PLAYER_ID}`),\n    ])\n      .then(axios.spread((\n        viData,\n        amandaData,\n        ryanData,\n        andyData,\n        alanData,\n        erikData\n      ) => {\n        viTrophies = viData.data.trophies + ' --------Vi'\n        amandaTrophies = amandaData.data.trophies + ' --------Amanda'\n        ryanTrophies = ryanData.data.trophies + ' --------Ryan'\n        andyTrophies = andyData.data.trophies + ' --------Andy'\n        alanTrophies = alanData.data.trophies + ' --------Alan'\n        erikTrophies = erikData.data.trophies + ' --------Erik'\n\n        let playersArr = [\n          viTrophies,\n          amandaTrophies,\n          ryanTrophies,\n          andyTrophies,\n          alanTrophies,\n          erikTrophies\n        ]\n\n        // Sort trophies from highest to lowest\n        let sortedPlayers = playersArr.sort((a, b) => {\n          let playerA = parseInt(a.split(' ')[0])\n          let playerB = parseInt(b.split(' ')[0])\n\n          if (playerA > playerB) return -1\n          if (playerB > playerA) return 1\n          return 0\n        })\n\n        // Add rankings\n        for (let i = 0; i < sortedPlayers.length; i++) {\n          const playerName = sortedPlayers[i].split(' ')[1]\n          const convertedTrophiesNum = parseInt(sortedPlayers[i].split(' ')[0]).toLocaleString() \n          sortedPlayers[i] = convertedTrophiesNum + playerName\n          sortedPlayers[i] = `${i + 1}. ${sortedPlayers[i]}`\n        }\n\n        // Convert to string\n        finalReply = sortedPlayers.join('\\n')\n        console.log(finalReply)\n      }))\n\n      .catch(error => {\n        console.log(error)\n      })\n\n    const embed = new EmbedBuilder()\n      .setColor('Random')\n      .setTitle('Trophies')\n      .setDescription(`${finalReply}`)\n      .setTimestamp()\n\n    interaction.reply({\n      // content: `${finalReply}`,\n      embeds: [embed]\n    })\n  }\n})\n\nclient.login(CLIENT_TOKEN)"]}